# Define needed environment variables: the rest of the yml will most
# likely translate well to other similar projects, except for the
# "secure" passwords in the deploy stage, which have to be adapted.
env:
  global:
    # test stage config
    - CODECOV_REQUIRED_PERCENT="50.0" # for utest+codecov
    - MAX_MB_ALLOWED="512" # for mem benchmark
    - MEM_MEASURE_EVERY_SEC="0.05" # in seconds, measure memory at these intervals
    - MAX_SEC_PER_LOOP="5.0" # for time benchmark
    # build stage config
    - DOC_PACKAGE_NAME="dummypackage"
    - DOC_AUTHOR_NAME="Dummy Dumson"
    - BUMPVERSION_FILE=".bumpversion.cfg"
    # deploy stage config
    - PYPI_USERNAME="fr_andres"
    - GH_RELEASES_ASSET_PATH="dist/*" # all matches for this path will be included into the GitHub release
    - REPO_NAME="andres-fr/python3-template" # releases will only work under this name
    - CHANGELOG_PATH="CHANGELOG.md" # relative to repo root

# this line routes the builds to Ubuntu 16.04
dist: xenial

# implicitly creates a venv for python in the VM (so pip syntax is "global")
language: python
python:
  - 3.7

# by default Travis starts every job from scratch. This speeds up things
cache: pip

# Perform pipeline only for events to master branch
branches:
  only:
  - master
  # this is needed for tag push actions (https://github.com/travis-ci/travis-ci/issues/8518#issuecomment-333489268)
  - /^v.*$/

#  https://docs.travis-ci.com/user/multi-os/
os:
  - linux
  # - osx
  #- windows

install: pip install -r requirements.txt


addons:
  apt:
    packages:
      - latexmk
      - texlive-fonts-recommended
      - texlive-latex-recommended
      - texlive-latex-extra
  # homebrew:
  #   packages: ...

# here we define the stages. stage ordering will come later
jobs:
  include:
    # Perform all needed tests to ensure repo quality. All scripts
    # in a stage are done in parallel. Stages are done sequentially.
    - stage: test
      name: "Check Code Style"
      script: python -m flake8
    - script: python -m unittest utest/tautology.py
      name: "Tautological Test"
    - script: python ci_scripts/utest_with_coverage.py -n "$DOC_PACKAGE_NAME" -p "$CODECOV_REQUIRED_PERCENT"
      name: "Unit Testing and Code Coverage"
    - script: python ci_scripts/memory_benchmark.py -m "$MAX_MB_ALLOWED" -i "$MEM_MEASURE_EVERY_SEC"
      name: "Memory Benchmarking"
    - script: python ci_scripts/runtime_benchmark.py -m "$MAX_SEC_PER_LOOP"
      name: "Runtime Benchmarking"

    # If all tests pass, go on to the build stage
    - stage: build
      script: python setup.py sdist bdist_wheel
      name: "Build Package"
    - script: python ci_scripts/make_sphinx_docs.py -n "$DOC_PACKAGE_NAME" -a "$DOC_AUTHOR_NAME" -f "$BUMPVERSION_FILE" -o "docs" -l
      name: "Build Autodocs"

    # If building was successful, deploy to various platforms
    - stage: deploy
      before_script: python setup.py sdist bdist_wheel # since we are deploying in a proper stage, the repo starts from scratch and needs to rebuild.
      script: echo ""
      name: "Deploy to GitHub Releases and PyPI"
      deploy:
        - provider: releases
          skip_cleanup: true
          name: "$TRAVIS_COMMIT_MESSAGE"
          body: "See [CHANGELOG]($CHANGELOG_PATH) for details."
          api_key:
            secure: "mf8Clj5RXzIX05dXTDGWnxeembpncHslFlIaSEpJt83/odusp1u885rxvYjrSzpcsxE3iaWdDf9W3vlB9/Hm/b5TUc0WBg/kxCx5qs3v6K9N0+3JURMUEhtBfUYs6FJ4RRIcWoakxFjlSZM9FmvGo1yQlabKZlPLTvQn4xwWQzk9fLAyKEDFJnCCmN1HzZm8SNLSIhZrvyw9Cz12bZYixsyfFODEV/Nk4XE4CTcFqgWRzy1wLN5oYQB/+H9CvVnX9yeF9ijkmBLzktgtU0xe0zYZNeHcGiviIS8oWVIpnJ8BSh55oqBsTxJshdKXO7O4dymzya4aLM/cr2SIjUCNOfaBiF4pJ82IHvLN3N0KMXRfpZjktaytZHgVdGAgMxoqzlLZulREaAL0O89r5y7LnXj2QUtnluXwiXvFlCbnWL1Tu8721xjXqNdGj4c2BVwnRIy8fFImvdaTKumHeUpkviYaEReNMBU3Kc8lBzm5uEaZoo0eErWtOoDJ+YF0IFwY0dnGH+8V3nTasO0n+lhiWZ+p22ckO7MvONRfgrWZT+qkZF0jEwKQRfou9+Jcs2+cilTJs/LRW2/nO+tA9H3DMFaq6aXM2DkxJO0+mQmxAHjCmuBTeru4416rzdATZ6OIhsC2D5CIY/HrlC4fGJBbwlG751hCqeMY0QoxLwI0cSY="
          file_glob: true
          file: "$GH_RELEASES_ASSET_PATH"
          on:
            tags: true
            # branch: master # already filtered out in the "branches" section
            repo: "$REPO_NAME"
        - provider: pypi
          skip_cleanup: true
          user: "$PYPI_USERNAME"
          password:
            secure: "qpDiwstuH9zjNAqeLUmn9s+AOny+eKYGBAWP3qrWwRi2gx+w0KQwk+uz+E/FgJp6lkPzAeV+UqMCz/y03EDK+dRdkbz7C5RrQFechHZM+Y1adPXfrIQvF3YdCzCRaLUF7V0/3gED6yGvFEquZLwxHSyM0GCUc8LyJnSuPDocFe7E2jiPJ+R8HFBD6dBqz4UFnriCiLKFj4//MJLdXu1Ad0SITW8XOrpHO/SrvWJ5PT2ilRcUPbpENqxSryG570CNUYyEE71jfxjOsPYAINZmiNnDCkYPaRXyCnPsNOgSwvqGLMr8cmUCjkhhfg/FGmztWQdON/cbdxGz38JcrynFeg1x2pCJ3Nwf4dIPrr3X5EFPfng0eJvVMLI8d6ne6dZvdRgSelevP09l4+6cF6gI12/OKxhn6WmGaADcWXnQQ6+a61n0rsObZadcGCR8ZsPw9QUJx1CHIYmBuaEAtMVgE4tDuXundBQa8mAbV4cgfDyXQ+Y0/zm52eVGAQVvwImWPvwEq5KnhsOoHgaR9nKtnFyENRnbFVX002QNmprahjPRi+yL2j/LIJg/7h2kmWolbuX0jkhpvgDmg5Sri2h7aqrYubM4Ko/GnjNnbZX36ePu453K97tHxl7KuFXX6TFzYwM2DRtD+/RY39gYqI49Mt9CYrUaJMUqZcPNn82ypQQ="
          on:
            tags: true
            # branch: master # already filtered out in the "branches" section
            repo: "$REPO_NAME"


# Here you can specify the order for stages, or skip some
stages:
  - test
  - build
  - deploy
