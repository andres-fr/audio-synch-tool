# Define needed environment variables: the rest of the yml will most
# likely translate well to other similar projects, except for the
# "secure" passwords in the deploy stage, which have to be adapted.
env:
  global:
    # test stage config
    - CODECOV_REQUIRED_PERCENT="0.0" # for utest+codecov
    # - MAX_MB_ALLOWED="512" # for mem benchmark
    # - MEM_MEASURE_EVERY_SEC="0.05" # in seconds, measure memory at these intervals
    # - MAX_SEC_PER_LOOP="5.0" # for time benchmark
    # build stage config
    - DOC_PACKAGE_NAME="audio_synch_tool"
    - DOC_AUTHOR_NAME="Andres FR"
    - BUMPVERSION_FILE=".bumpversion.cfg"
    # deploy stage config
    - PYPI_USERNAME="fr_andres"
    - GH_RELEASES_ASSET_PATH="dist/*" # all matches for this path will be included into the GitHub release
    - REPO_NAME="andres-fr/audio-synch-tool" # releases will only work under this name
    - CHANGELOG_PATH="CHANGELOG.md" # relative to repo root

# this line routes the builds to Ubuntu 16.04
dist: xenial

# implicitly creates a venv for python in the VM (so pip syntax is "global")
language: python
python:
  - 3.7

# by default Travis starts every job from scratch. This speeds up things
cache: pip

# Perform pipeline only for events to master branch
branches:
  only:
  - master
  # this is needed for tag push actions (https://github.com/travis-ci/travis-ci/issues/8518#issuecomment-333489268)
  - /^v.*$/

#  https://docs.travis-ci.com/user/multi-os/
os:
  - linux
  # - osx
  #- windows

install: pip install -r requirements.txt


addons:
  apt:
    update: true
    packages:
      - latexmk
      - texlive-fonts-recommended
      - texlive-latex-recommended
      - texlive-latex-extra
  # homebrew:
  #   packages: ...

# here we define the stages. stage ordering will come later
jobs:
  include:
    # Perform all needed tests to ensure repo quality. All scripts
    # in a stage are done in parallel. Stages are done sequentially.
    - stage: test
      name: "Check Code Style"
      script: python -m flake8
    - script: python -m unittest audio_synch_tool_utest/tautology.py
      name: "Tautological Test"
    - script: python ci_scripts/utest_with_coverage.py -n "$DOC_PACKAGE_NAME" -p "$CODECOV_REQUIRED_PERCENT"
      name: "Unit Testing and Code Coverage"
    # - script: python ci_scripts/memory_benchmark.py -m "$MAX_MB_ALLOWED" -i "$MEM_MEASURE_EVERY_SEC"
    #   name: "Memory Benchmarking"
    # - script: python ci_scripts/runtime_benchmark.py -m "$MAX_SEC_PER_LOOP"
    #   name: "Runtime Benchmarking"

    # If all tests pass, go on to the build stage
    - stage: build
      script: python setup.py sdist bdist_wheel
      name: "Build Package"
    - script: python ci_scripts/make_sphinx_docs.py -n "$DOC_PACKAGE_NAME" -a "$DOC_AUTHOR_NAME" -f "$BUMPVERSION_FILE" -o "docs" -l
      name: "Build Autodocs"

    # If building was successful, deploy to various platforms
    - stage: deploy
      before_script: python setup.py sdist bdist_wheel # since we are deploying in a proper stage, the repo starts from scratch and needs to rebuild.
      script: echo ""
      name: "Deploy to GitHub Releases and PyPI"
      deploy:
        - provider: releases
          skip_cleanup: true
          name: "$TRAVIS_COMMIT_MESSAGE"
          body: "See [CHANGELOG]($CHANGELOG_PATH) for details."
          api_key:
            secure: "j9rLBizLl99v86vKjQNxaxkp9XcuJ0noUAI/C/XicN/6dDoCdscbngJW383SJp85t9/0XtuPSFW8sq9V2sxzGdCdr2WR8WOf33U50sMF0yzLPIEZ2trreEmoysQKN4G23wE5NB/QONrEZfnHKQE0MJz0/NNUmPjgXGbr0xqjb1/NVL+RSiSJ6EtlpH6yKxiIOkfM6cB9R4Y3xMV4q+2E8R0jq/Nj230dgnKp4a584meJzufnLxHd7397oC80uDx3CTNUdlAsEvZLjlXBNOdVmS4mov11Qo293cA6VNDRgoTht7ozAeA8K5XvDoyJu2d0Hkj11vOtF7n5AYHPdXOHL8k+Dk6+YCshEx2RgvXu/Cpzmh+ACl6juHx1u/L1W879M7sEDmmNQDpcmL0Te9DMPA34va2TfTPPsVv9GjYRIZAJ6w+Fi0XppzPXylzPPQxjoRN2lhmNOiG4PnYA04dJAA9vB45HU2BI4UYZbOMnE9tA8zw8dy+dexOFST0x1P5QXTfqc1m9l3R0ZIpaPztyrwjDcQxTDJz7aMbRLUEPEss5Ixhe2X+9rSM6la1RJ5VnIc0cxUYtbpfds/NNkt1xEawXpHwQtNhNgDVzIEBKyGjcOh6vTQR7UuxVrvv6otsu6xc2qxW4bcTMmc7EIplLaKFpS2QkiMEfKl/FFffxTko="
          file_glob: true
          file: "$GH_RELEASES_ASSET_PATH"
          on:
            tags: true
            # branch: master # already filtered out in the "branches" section
            repo: "$REPO_NAME"
        - provider: pypi
          skip_cleanup: true
          user: "$PYPI_USERNAME"
          password:
            secure: "Dk8uulP1kEz1kN/ClOTUeLS467gMGIe897tlxAVjQv0NDIjLUxG4plj09XKN22QXxcJpDlyz8qEmXm7fNLkRzsaLbxRmOZaU8FBRQfViqNlyrGbb0Y5gLDzBKikSfz7AFfQ/xtRq8/4M0vpmbTd98g5cbGDTV/EZbOnDsW+uCbTIAPtWo/s/WGikzPEhk/vLrmg58r1O1rkMRM3p/N03FiAgnzgF5DIgCl7yahKLGSzy7s2tWXH9wZfNxrgHl+jYvN8ZFqPIUN/SW0GmjBl7peduN7o699h5PRlXHoWes385Xm4jWKeLCPamdzNWb1XnZ2MO9K71L7uaSSGJlLzRPgiJzGXK1IwGi1wIak0ncmnjnlRF4PAkospOE5BvUYa9TkCvO+aOp1C8+WPdjLRUb8RuZZT9wrOx9n4IKEJyjHqCdIve74/iO8mvtrH8RLtfL+BifyvgYPYC95t2TiGzB+noX6bfvekgNqlyZlwPp75rIXp3Q2KIyPBwdqpV+YtdTb0ONdA/GXS8jup72IjsFqeH88Uxz09n22w4dfUFRp0Ia0HQDKJinVhBqMAPtUKgQF5Ut6L5YJy0TQxb5k/pH8NubjWxmsO69jt0WieylCldU/S199QlZd97m1nGpB888QOzybK9nK2YFWr6QO7R9t91/QSjd0tA7d9cQ3mdghg="
          on:
            tags: true
            # branch: master # already filtered out in the "branches" section
            repo: "$REPO_NAME"


# Here you can specify the order for stages, or skip some
stages:
  - test
  - build
  - deploy
